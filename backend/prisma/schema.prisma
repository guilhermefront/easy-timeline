generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Events {
  event_id    BigInt    @id @default(autoincrement())
  timeline_id BigInt    @unique
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  title       String
  content     String
  image       String?
  link        String?
  Timelines   Timelines @relation(fields: [timeline_id], references: [timeline_id], onDelete: NoAction, onUpdate: NoAction)
}

model Timelines {
  timeline_id BigInt    @id @default(autoincrement())
  id          String    @unique
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  title       String
  Events      Events?
  User        User      @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Timelines     Timelines?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
